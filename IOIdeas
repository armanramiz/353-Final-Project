config.h
	#define TASK_BUTTON_DELAY
	#define TASK_LIGHT_DELAY
	#define TASK_ACCEL_BEGIN_DELAY

task_button.h
	void initTaskButton(void); // Initialize as needed.
	bool isS2Pressed(void); // TRUE if button is pressed, false otherwise (based off static var)

task_light.h
	void initTaskLight(void); // Initialize as needed.
	bool isDark(void); // TRUE if sensor reads dark room, false otherwise (based off static var)

task_lcd.h
	typedef struct Image {
		uint16_t x;
		uint16_t y;
		uint16_t image_width_pixels;
		uint16_t image_height_pixels;
		const uint8_t *image;
		uint16_t fColor;
		uint16_t bColor;
	} image_t;
	void initTaskLCD(void); // Initialize as needed
	void drawImg(image_t*); // Add to lcd's queue (Wrapper for xQueueSendToBack() function)

task_accel.h
	enum Dir {LEFT, CENTER, RIGHT}; // Enum to describe accel. value.
	void initTaskAccel(void); // Initialize as needed.
	enum Dir accelDir(void); // Return accel's general tilt. (based off static var)

task_buzzer.h
	typedef struct Note {
		uint32_t period;
		uint8_t measureDivider;
		bool delay;
	} note_t;
	typedef struct Music {
		note_t* song;
		uint8_t numNotes;
	} music_t;
	void initTaskBuzzer(void); // Initialize as needed.
	void playMusic(music_t* music); // Add to buzzer queue (Wrapper for xQueueSendToBack function)

